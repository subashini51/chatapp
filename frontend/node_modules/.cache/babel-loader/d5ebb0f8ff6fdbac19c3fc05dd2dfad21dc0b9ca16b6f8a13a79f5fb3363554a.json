{"ast":null,"code":"var _jsxFileName = \"D:\\\\bot\\\\frontend\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const location = useLocation();\n  const {\n    username,\n    token\n  } = location.state || {};\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [chatType, setChatType] = useState('');\n  const [selectedUser, setSelectedUser] = useState('');\n  const [onlineUsers, setOnlineUsers] = useState({});\n  const [rooms, setRooms] = useState([]);\n  const webSocket = useRef(null);\n  useEffect(() => {\n    if (!username) {\n      return;\n    }\n    webSocket.current = new WebSocket(`ws://localhost:8000/ws/${username}`);\n    webSocket.current.onopen = () => {\n      console.log('WebSocket connection established');\n    };\n    webSocket.current.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'message') {\n        setMessages(prevMessages => [...prevMessages, data.data]);\n      } else if (data.type === 'status') {\n        setOnlineUsers(data.data);\n      }\n    };\n    webSocket.current.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n    return () => {\n      if (webSocket.current) {\n        webSocket.current.close();\n      }\n    };\n  }, [username]);\n  const handleSendMessage = () => {\n    if (input.trim() !== '' && webSocket.current) {\n      const messageData = chatType === 'group' ? {\n        type: 'group',\n        room: 'opcode convo',\n        message: input\n      } : {\n        type: 'one-to-one',\n        recipient: selectedUser,\n        message: input\n      };\n      webSocket.current.send(JSON.stringify(messageData));\n      setInput('');\n    }\n  };\n  const fetchRooms = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/rooms');\n      const data = await response.json();\n      setRooms(data);\n    } catch (error) {\n      console.error('Error fetching rooms:', error);\n    }\n  };\n  useEffect(() => {\n    fetchRooms();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-info\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Logged in as: \", username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Chat Type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: chatType,\n            onChange: e => setChatType(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select chat type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"one-to-one\",\n              children: \"One-to-One\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"group\",\n              children: \"Group\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), chatType === 'one-to-one' && /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Recipient:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedUser,\n            onChange: e => setSelectedUser(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select user\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 33\n            }, this), Object.keys(onlineUsers).map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: user,\n              children: user\n            }, user, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"trLbzQ/ADBLppBDH9C7+aco8Wg0=\", false, function () {\n  return [useLocation];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useLocation","jsxDEV","_jsxDEV","Chat","_s","location","username","token","state","messages","setMessages","input","setInput","chatType","setChatType","selectedUser","setSelectedUser","onlineUsers","setOnlineUsers","rooms","setRooms","webSocket","current","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","type","prevMessages","onclose","close","handleSendMessage","trim","messageData","room","message","recipient","send","stringify","fetchRooms","response","fetch","json","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","Object","keys","map","user","index","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/bot/frontend/src/components/Chat.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './Chat.css';\r\n\r\nconst Chat = () => {\r\n    const location = useLocation();\r\n    const { username, token } = location.state || {};\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [chatType, setChatType] = useState('');\r\n    const [selectedUser, setSelectedUser] = useState('');\r\n    const [onlineUsers, setOnlineUsers] = useState({});\r\n    const [rooms, setRooms] = useState([]);\r\n    const webSocket = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (!username) {\r\n            return;\r\n        }\r\n\r\n        webSocket.current = new WebSocket(`ws://localhost:8000/ws/${username}`);\r\n\r\n        webSocket.current.onopen = () => {\r\n            console.log('WebSocket connection established');\r\n        };\r\n\r\n        webSocket.current.onmessage = (event) => {\r\n            const data = JSON.parse(event.data);\r\n            if (data.type === 'message') {\r\n                setMessages((prevMessages) => [...prevMessages, data.data]);\r\n            } else if (data.type === 'status') {\r\n                setOnlineUsers(data.data);\r\n            }\r\n        };\r\n\r\n        webSocket.current.onclose = () => {\r\n            console.log('WebSocket connection closed');\r\n        };\r\n\r\n        return () => {\r\n            if (webSocket.current) {\r\n                webSocket.current.close();\r\n            }\r\n        };\r\n    }, [username]);\r\n\r\n    const handleSendMessage = () => {\r\n        if (input.trim() !== '' && webSocket.current) {\r\n            const messageData = chatType === 'group'\r\n                ? { type: 'group', room: 'opcode convo', message: input }\r\n                : { type: 'one-to-one', recipient: selectedUser, message: input };\r\n\r\n            webSocket.current.send(JSON.stringify(messageData));\r\n            setInput('');\r\n        }\r\n    };\r\n\r\n    const fetchRooms = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8000/rooms');\r\n            const data = await response.json();\r\n            setRooms(data);\r\n        } catch (error) {\r\n            console.error('Error fetching rooms:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchRooms();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"chat-header\">\r\n                <h2>Chat</h2>\r\n                <div className=\"user-info\">\r\n                    <span>Logged in as: {username}</span>\r\n                </div>\r\n                <div className=\"chat-controls\">\r\n                    <label>\r\n                        Chat Type:\r\n                        <select value={chatType} onChange={(e) => setChatType(e.target.value)}>\r\n                            <option value=\"\">Select chat type</option>\r\n                            <option value=\"one-to-one\">One-to-One</option>\r\n                            <option value=\"group\">Group</option>\r\n                        </select>\r\n                    </label>\r\n                    {chatType === 'one-to-one' && (\r\n                        <label>\r\n                            Recipient:\r\n                            <select value={selectedUser} onChange={(e) => setSelectedUser(e.target.value)}>\r\n                                <option value=\"\">Select user</option>\r\n                                {Object.keys(onlineUsers).map((user) => (\r\n                                    <option key={user} value={user}>{user}</option>\r\n                                ))}\r\n                            </select>\r\n                        </label>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <div className=\"chat-messages\">\r\n                {messages.map((message, index) => (\r\n                    <div key={index} className=\"message\">\r\n                        {message}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"chat-input\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Type a message\"\r\n                />\r\n                <button onClick={handleSendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}