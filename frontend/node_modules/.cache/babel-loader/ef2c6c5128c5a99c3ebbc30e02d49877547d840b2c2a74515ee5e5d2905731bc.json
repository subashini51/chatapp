{"ast":null,"code":"var _jsxFileName = \"D:\\\\bot\\\\frontend\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const location = useLocation();\n  const {\n    username,\n    token\n  } = location.state || {};\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [chatType, setChatType] = useState('group');\n  const [selectedUser, setSelectedUser] = useState('');\n  const [userStatuses, setUserStatuses] = useState({});\n  const websocketRef = useRef(null);\n\n  // Fetch user statuses from the backend on component mount\n  useEffect(() => {\n    const fetchUserStatuses = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:8000/user_status');\n        const data = await response.json();\n        setUserStatuses(data);\n      } catch (error) {\n        console.error('Error fetching user statuses:', error);\n      }\n    };\n    fetchUserStatuses();\n  }, []);\n\n  // Establish WebSocket connection and handle incoming messages\n  useEffect(() => {\n    const connectWebSocket = () => {\n      if (username && token) {\n        const websocket = new WebSocket(`ws://127.0.0.1:8000/ws/${username}?token=${token}`);\n        websocketRef.current = websocket;\n        websocket.onopen = () => {\n          console.log('WebSocket connection opened');\n        };\n        websocket.onmessage = event => {\n          try {\n            const messageData = JSON.parse(event.data);\n            if (messageData.type === 'status') {\n              setUserStatuses(messageData.data);\n            } else if (messageData.type === 'message') {\n              setMessages(prevMessages => [...prevMessages, messageData.data]);\n            }\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n        websocket.onclose = () => {\n          console.log('WebSocket connection closed, attempting to reconnect');\n          setTimeout(connectWebSocket, 1000);\n        };\n        websocket.onerror = error => {\n          console.error('WebSocket error:', error);\n        };\n        window.addEventListener('beforeunload', () => {\n          if (websocketRef.current) {\n            websocketRef.current.close();\n          }\n        });\n        return () => {\n          if (websocketRef.current) {\n            websocketRef.current.close();\n          }\n        };\n      }\n    };\n    connectWebSocket();\n  }, [username, token]);\n\n  // Handle sending messages\n  const sendMessage = () => {\n    if (input.trim() === '') return;\n    const ws = websocketRef.current;\n    if (ws && ws.readyState === WebSocket.OPEN) {\n      try {\n        const message = chatType === 'one-to-one' && selectedUser ? `${selectedUser}:${input}` // Format for one-to-one chat\n        : input; // Group chat (send as is)\n\n        // Send message to WebSocket server\n        ws.send(message);\n\n        // Append message to sender's message list\n        const formattedMessage = chatType === 'one-to-one' && selectedUser ? `${username} to ${selectedUser}: ${input}` // Format for one-to-one chat\n        : `${username}: ${input}`; // Group chat (format as is)\n        setMessages(prevMessages => [...prevMessages, formattedMessage]);\n        setInput('');\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome to the Chat, \", username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-status\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Online Users:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Object.entries(userStatuses).map(([user, status]) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: status === 'online' ? 'online' : 'offline',\n          children: [user, \" - \", status]\n        }, user, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: msg\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"FK4U67B9uwsrOcFAqOLuVrmT6qk=\", false, function () {\n  return [useLocation];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useLocation","jsxDEV","_jsxDEV","Chat","_s","location","username","token","state","messages","setMessages","input","setInput","chatType","setChatType","selectedUser","setSelectedUser","userStatuses","setUserStatuses","websocketRef","fetchUserStatuses","response","fetch","data","json","error","console","connectWebSocket","websocket","WebSocket","current","onopen","log","onmessage","event","messageData","JSON","parse","type","prevMessages","onclose","setTimeout","onerror","window","addEventListener","close","sendMessage","trim","ws","readyState","OPEN","message","send","formattedMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","user","status","msg","index","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/bot/frontend/src/components/Chat.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './Chat.css';\r\n\r\nconst Chat = () => {\r\n    const location = useLocation();\r\n    const { username, token } = location.state || {};\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [chatType, setChatType] = useState('group');\r\n    const [selectedUser, setSelectedUser] = useState('');\r\n    const [userStatuses, setUserStatuses] = useState({});\r\n    const websocketRef = useRef(null);\r\n\r\n    // Fetch user statuses from the backend on component mount\r\n    useEffect(() => {\r\n        const fetchUserStatuses = async () => {\r\n            try {\r\n                const response = await fetch('http://127.0.0.1:8000/user_status');\r\n                const data = await response.json();\r\n                setUserStatuses(data);\r\n            } catch (error) {\r\n                console.error('Error fetching user statuses:', error);\r\n            }\r\n        };\r\n\r\n        fetchUserStatuses();\r\n    }, []);\r\n\r\n    // Establish WebSocket connection and handle incoming messages\r\n    useEffect(() => {\r\n        const connectWebSocket = () => {\r\n            if (username && token) {\r\n                const websocket = new WebSocket(`ws://127.0.0.1:8000/ws/${username}?token=${token}`);\r\n                websocketRef.current = websocket;\r\n\r\n                websocket.onopen = () => {\r\n                    console.log('WebSocket connection opened');\r\n                };\r\n\r\n                websocket.onmessage = (event) => {\r\n                    try {\r\n                        const messageData = JSON.parse(event.data);\r\n                        if (messageData.type === 'status') {\r\n                            setUserStatuses(messageData.data);\r\n                        } else if (messageData.type === 'message') {\r\n                            setMessages((prevMessages) => [...prevMessages, messageData.data]);\r\n                        }\r\n                    } catch (error) {\r\n                        console.error('Error parsing WebSocket message:', error);\r\n                    }\r\n                };\r\n\r\n                websocket.onclose = () => {\r\n                    console.log('WebSocket connection closed, attempting to reconnect');\r\n                    setTimeout(connectWebSocket, 1000);\r\n                };\r\n\r\n                websocket.onerror = (error) => {\r\n                    console.error('WebSocket error:', error);\r\n                };\r\n\r\n                window.addEventListener('beforeunload', () => {\r\n                    if (websocketRef.current) {\r\n                        websocketRef.current.close();\r\n                    }\r\n                });\r\n\r\n                return () => {\r\n                    if (websocketRef.current) {\r\n                        websocketRef.current.close();\r\n                    }\r\n                };\r\n            }\r\n        };\r\n\r\n        connectWebSocket();\r\n    }, [username, token]);\r\n\r\n    // Handle sending messages\r\n    const sendMessage = () => {\r\n        if (input.trim() === '') return;\r\n\r\n        const ws = websocketRef.current;\r\n        if (ws && ws.readyState === WebSocket.OPEN) {\r\n            try {\r\n                const message = chatType === 'one-to-one' && selectedUser\r\n                    ? `${selectedUser}:${input}`  // Format for one-to-one chat\r\n                    : input;  // Group chat (send as is)\r\n\r\n                // Send message to WebSocket server\r\n                ws.send(message);\r\n\r\n                // Append message to sender's message list\r\n                const formattedMessage = chatType === 'one-to-one' && selectedUser\r\n                    ? `${username} to ${selectedUser}: ${input}`  // Format for one-to-one chat\r\n                    : `${username}: ${input}`;  // Group chat (format as is)\r\n                setMessages((prevMessages) => [...prevMessages, formattedMessage]);\r\n                setInput('');\r\n            } catch (error) {\r\n                console.error('Error sending message:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"chat-header\">\r\n                <h1>Welcome to the Chat, {username}</h1>\r\n            </div>\r\n            <div className=\"chat-status\">\r\n                <h2>Online Users:</h2>\r\n                <ul>\r\n                    {Object.entries(userStatuses).map(([user, status]) => (\r\n                        <li key={user} className={status === 'online' ? 'online' : 'offline'}>\r\n                            {user} - {status}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n            <div className=\"chat-messages\">\r\n                {messages.map((msg, index) => (\r\n                    <div key={index} className=\"message\">\r\n                        {msg}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"chat-input\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Type your message...\"\r\n                />\r\n                <button onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}