{"ast":null,"code":"var _jsxFileName = \"D:\\\\bot\\\\frontend\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const location = useLocation();\n  const {\n    username,\n    token\n  } = location.state || {};\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [chatType, setChatType] = useState('group');\n  const [selectedUser, setSelectedUser] = useState('');\n  const websocketRef = useRef(null);\n  useEffect(() => {\n    if (username && token) {\n      const websocket = new WebSocket(`ws://127.0.0.1:8000/ws/${username}?token=${token}`);\n      websocketRef.current = websocket;\n      websocket.onopen = () => {\n        console.log('WebSocket connection opened');\n      };\n      websocket.onmessage = event => {\n        setMessages(prevMessages => [...prevMessages, event.data]);\n      };\n      websocket.onclose = () => {\n        console.log('WebSocket connection closed');\n      };\n      websocket.onerror = error => {\n        console.error('WebSocket error:', error);\n      };\n      return () => {\n        websocket.close();\n      };\n    }\n  }, [username, token]);\n  const sendMessage = () => {\n    if (input.trim() !== '') {\n      const ws = websocketRef.current;\n      if (ws && ws.readyState === WebSocket.OPEN) {\n        let message;\n        if (chatType === 'one-to-one' && selectedUser) {\n          message = `${selectedUser}:${input}`; // Format for one-to-one chat\n        } else {\n          message = `group:${input}`; // Group chat prefix\n        }\n        ws.send(message);\n        setInput('');\n      } else {\n        console.error('WebSocket connection is not open or has been closed');\n      }\n    } else {\n      console.warn('Message input is empty');\n    }\n  };\n  const handleChatTypeChange = type => {\n    setChatType(type);\n    setSelectedUser(''); // Clear selected user for group chat\n    setMessages([]); // Optionally clear messages when changing chat type\n  };\n  const handleUserClick = user => {\n    if (chatType === 'one-to-one') {\n      setSelectedUser(user);\n      setMessages([]); // Clear messages when changing to a new user\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-type-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleChatTypeChange('one-to-one'),\n          className: chatType === 'one-to-one' ? 'active' : '',\n          children: \"One-to-One\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleChatTypeChange('group'),\n          className: chatType === 'group' ? 'active' : '',\n          children: \"Group Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: ['user1', 'user2', 'user3'].map((user, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleUserClick(user),\n          className: selectedUser === user ? 'selected' : '',\n          children: user\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: chatType === 'group' ? `Group Chat - ${username}` : `One-to-One Chat - ${selectedUser}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-body\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.startsWith(username) ? 'sent' : 'received'}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\",\n            children: msg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyPress: e => {\n            if (e.key === 'Enter') sendMessage();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"sGW3GnUktNCcmT9nmSmBkfRcb4Y=\", false, function () {\n  return [useLocation];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useLocation","jsxDEV","_jsxDEV","Chat","_s","location","username","token","state","messages","setMessages","input","setInput","chatType","setChatType","selectedUser","setSelectedUser","websocketRef","websocket","WebSocket","current","onopen","console","log","onmessage","event","prevMessages","data","onclose","onerror","error","close","sendMessage","trim","ws","readyState","OPEN","message","send","warn","handleChatTypeChange","type","handleUserClick","user","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","msg","startsWith","value","onChange","e","target","onKeyPress","key","_c","$RefreshReg$"],"sources":["D:/bot/frontend/src/components/Chat.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './Chat.css';\r\n\r\nconst Chat = () => {\r\n    const location = useLocation();\r\n    const { username, token } = location.state || {};\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [chatType, setChatType] = useState('group');\r\n    const [selectedUser, setSelectedUser] = useState('');\r\n    const websocketRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (username && token) {\r\n            const websocket = new WebSocket(`ws://127.0.0.1:8000/ws/${username}?token=${token}`);\r\n            websocketRef.current = websocket;\r\n\r\n            websocket.onopen = () => {\r\n                console.log('WebSocket connection opened');\r\n            };\r\n\r\n            websocket.onmessage = (event) => {\r\n                setMessages((prevMessages) => [...prevMessages, event.data]);\r\n            };\r\n\r\n            websocket.onclose = () => {\r\n                console.log('WebSocket connection closed');\r\n            };\r\n\r\n            websocket.onerror = (error) => {\r\n                console.error('WebSocket error:', error);\r\n            };\r\n\r\n            return () => {\r\n                websocket.close();\r\n            };\r\n        }\r\n    }, [username, token]);\r\n\r\n    const sendMessage = () => {\r\n        if (input.trim() !== '') {\r\n            const ws = websocketRef.current;\r\n            if (ws && ws.readyState === WebSocket.OPEN) {\r\n                let message;\r\n                if (chatType === 'one-to-one' && selectedUser) {\r\n                    message = `${selectedUser}:${input}`;  // Format for one-to-one chat\r\n                } else {\r\n                    message = `group:${input}`;  // Group chat prefix\r\n                }\r\n                ws.send(message);\r\n                setInput('');\r\n            } else {\r\n                console.error('WebSocket connection is not open or has been closed');\r\n            }\r\n        } else {\r\n            console.warn('Message input is empty');\r\n        }\r\n    };\r\n\r\n    const handleChatTypeChange = (type) => {\r\n        setChatType(type);\r\n        setSelectedUser('');  // Clear selected user for group chat\r\n        setMessages([]);  // Optionally clear messages when changing chat type\r\n    };\r\n\r\n    const handleUserClick = (user) => {\r\n        if (chatType === 'one-to-one') {\r\n            setSelectedUser(user);\r\n            setMessages([]);  // Clear messages when changing to a new user\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"sidebar\">\r\n                <h3>Users</h3>\r\n                <div className=\"chat-type-buttons\">\r\n                    <button\r\n                        onClick={() => handleChatTypeChange('one-to-one')}\r\n                        className={chatType === 'one-to-one' ? 'active' : ''}\r\n                    >\r\n                        One-to-One\r\n                    </button>\r\n                    <button\r\n                        onClick={() => handleChatTypeChange('group')}\r\n                        className={chatType === 'group' ? 'active' : ''}\r\n                    >\r\n                        Group Chat\r\n                    </button>\r\n                </div>\r\n                <ul>\r\n                    {['user1', 'user2', 'user3'].map((user, index) => (\r\n                        <li\r\n                            key={index}\r\n                            onClick={() => handleUserClick(user)}\r\n                            className={selectedUser === user ? 'selected' : ''}\r\n                        >\r\n                            {user}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n            <div className=\"chat-content\">\r\n                <div className=\"chat-header\">\r\n                    <h2>\r\n                        {chatType === 'group'\r\n                            ? `Group Chat - ${username}`\r\n                            : `One-to-One Chat - ${selectedUser}`}\r\n                    </h2>\r\n                </div>\r\n                <div className=\"chat-body\">\r\n                    {messages.map((msg, index) => (\r\n                        <div\r\n                            key={index}\r\n                            className={`message ${msg.startsWith(username) ? 'sent' : 'received'}`}\r\n                        >\r\n                            <div className=\"content\">{msg}</div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"message-input\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={input}\r\n                        onChange={(e) => setInput(e.target.value)}\r\n                        onKeyPress={(e) => {\r\n                            if (e.key === 'Enter') sendMessage();\r\n                        }}\r\n                    />\r\n                    <button onClick={sendMessage}>Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}