{"ast":null,"code":"var _jsxFileName = \"D:\\\\bot\\\\frontend\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport './Chat.css';\n\n// Import images based on usernames\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst userProfilePics = {\n  suba: require('./images/Frame 11.png'),\n  sindhu: require('./images/Frame 11.png'),\n  dhamodhran: require('./images/Frame 10.png'),\n  leesa: require('./images/Frame 11.png'),\n  mohendran: require('./images/Frame 30.png'),\n  deepan: require('./images/Frame 12 (1).png'),\n  sathish: require('./images/Frame 12.png'),\n  opcodeconvo: require('./images/Frame 1.png')\n};\n\n// Ignore the allowedUsers variable warning\n// eslint-disable-next-line\nconst allowedUsers = ['deepan', 'mohendran', 'leesa', 'sathish'];\nconst Chat = () => {\n  _s();\n  const location = useLocation();\n  // Ignore the navigate variable warning\n  // eslint-disable-next-line\n  const navigate = useNavigate();\n  const {\n    username,\n    token\n  } = location.state || {};\n  const [messages, setMessages] = useState(() => {\n    const storedMessages = localStorage.getItem(`chatMessages_${username}`);\n    return storedMessages ? JSON.parse(storedMessages) : [];\n  });\n  const [input, setInput] = useState('');\n  const [chatType, setChatType] = useState('');\n  const [selectedUser, setSelectedUser] = useState('');\n  const [userStatuses, setUserStatuses] = useState({});\n  const websocketRef = useRef(null);\n  useEffect(() => {\n    const fetchUserStatuses = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:8000/user_status');\n        const data = await response.json();\n        if (data && typeof data === 'object') {\n          setUserStatuses(data);\n        } else {\n          console.error('Invalid user status data:', data);\n        }\n      } catch (error) {\n        console.error('Error fetching user statuses:', error);\n      }\n    };\n    fetchUserStatuses();\n  }, []);\n  useEffect(() => {\n    if (username && token) {\n      const ws = new WebSocket(`ws://127.0.0.1:8000/ws/${username}`);\n      websocketRef.current = ws;\n      ws.onopen = () => {\n        console.log('WebSocket connection opened');\n      };\n      ws.onmessage = event => {\n        const message = JSON.parse(event.data);\n        console.log('Received message:', message);\n        if (message.type === 'message') {\n          setMessages(prevMessages => {\n            const updatedMessages = [...prevMessages, message.data];\n            localStorage.setItem(`chatMessages_${username}`, JSON.stringify(updatedMessages));\n            return updatedMessages;\n          });\n        } else if (message.type === 'status') {\n          setUserStatuses(message.data);\n        } else if (message.type === 'error') {\n          console.error(message.data);\n        }\n      };\n      ws.onclose = () => {\n        console.log('WebSocket connection closed');\n        setTimeout(() => {\n          console.log('Reconnecting...');\n          websocketRef.current = new WebSocket(`ws://127.0.0.1:8000/ws/${username}`);\n        }, 2000);\n      };\n      ws.onerror = error => {\n        console.error('WebSocket error:', error);\n      };\n      return () => {\n        ws.close();\n      };\n    }\n  }, [username, token]);\n  const sendMessage = () => {\n    if (input.trim() !== '') {\n      const message = {\n        type: chatType === 'one-to-one' ? 'one-to-one' : 'group',\n        recipient: chatType === 'one-to-one' ? selectedUser : undefined,\n        room: chatType === 'group' ? 'opcode convo' : undefined,\n        text: input.trim()\n      };\n      if (websocketRef.current && websocketRef.current.readyState === WebSocket.OPEN) {\n        websocketRef.current.send(JSON.stringify(message));\n        console.log('Sent message:', message);\n        setMessages(prevMessages => {\n          const updatedMessages = [...prevMessages, {\n            user: username,\n            text: input.trim()\n          }];\n          localStorage.setItem(`chatMessages_${username}`, JSON.stringify(updatedMessages));\n          return updatedMessages;\n        });\n        setInput(''); // Clear input after sending\n      } else {\n        console.error('WebSocket connection is not open');\n      }\n    }\n  };\n\n  // Ignore the handleUserSelection variable warning\n  // eslint-disable-next-line\n  const handleUserSelection = user => {\n    setSelectedUser(user);\n    setChatType('one-to-one');\n  };\n  const handleGroupChat = () => {\n    setChatType('group');\n    setSelectedUser('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), Object.keys(userStatuses).map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `user-item ${userStatuses[user]}`,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: userProfilePics[user],\n          alt: `${user}'s profile`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }, this), user]\n      }, user, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGroupChat,\n        children: \"Group Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.user === username ? 'sent' : 'received'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [message.user, \": \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 29\n          }, this), message.text]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: e => e.key === 'Enter' ? sendMessage() : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"KOt6QACx98BaiO/MG9MY9xZ5tnk=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useLocation","useNavigate","jsxDEV","_jsxDEV","userProfilePics","suba","require","sindhu","dhamodhran","leesa","mohendran","deepan","sathish","opcodeconvo","allowedUsers","Chat","_s","location","navigate","username","token","state","messages","setMessages","storedMessages","localStorage","getItem","JSON","parse","input","setInput","chatType","setChatType","selectedUser","setSelectedUser","userStatuses","setUserStatuses","websocketRef","fetchUserStatuses","response","fetch","data","json","console","error","ws","WebSocket","current","onopen","log","onmessage","event","message","type","prevMessages","updatedMessages","setItem","stringify","onclose","setTimeout","onerror","close","sendMessage","trim","recipient","undefined","room","text","readyState","OPEN","send","user","handleUserSelection","handleGroupChat","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","src","alt","onClick","index","value","onChange","e","target","onKeyDown","key","_c","$RefreshReg$"],"sources":["D:/bot/frontend/src/components/Chat.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport './Chat.css';\r\n\r\n// Import images based on usernames\r\nconst userProfilePics = {\r\n    suba: require('./images/Frame 11.png'),\r\n    sindhu: require('./images/Frame 11.png'),\r\n    dhamodhran: require('./images/Frame 10.png'),\r\n    leesa: require('./images/Frame 11.png'),\r\n    mohendran: require('./images/Frame 30.png'),\r\n    deepan: require('./images/Frame 12 (1).png'),\r\n    sathish: require('./images/Frame 12.png'),\r\n    opcodeconvo: require('./images/Frame 1.png'),\r\n};\r\n\r\n// Ignore the allowedUsers variable warning\r\n// eslint-disable-next-line\r\nconst allowedUsers = ['deepan', 'mohendran', 'leesa', 'sathish'];\r\n\r\nconst Chat = () => {\r\n    const location = useLocation();\r\n    // Ignore the navigate variable warning\r\n    // eslint-disable-next-line\r\n    const navigate = useNavigate();\r\n    const { username, token } = location.state || {};\r\n    const [messages, setMessages] = useState(() => {\r\n        const storedMessages = localStorage.getItem(`chatMessages_${username}`);\r\n        return storedMessages ? JSON.parse(storedMessages) : [];\r\n    });\r\n    const [input, setInput] = useState('');\r\n    const [chatType, setChatType] = useState('');\r\n    const [selectedUser, setSelectedUser] = useState('');\r\n    const [userStatuses, setUserStatuses] = useState({});\r\n    const websocketRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const fetchUserStatuses = async () => {\r\n            try {\r\n                const response = await fetch('http://127.0.0.1:8000/user_status');\r\n                const data = await response.json();\r\n                if (data && typeof data === 'object') {\r\n                    setUserStatuses(data);\r\n                } else {\r\n                    console.error('Invalid user status data:', data);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching user statuses:', error);\r\n            }\r\n        };\r\n\r\n        fetchUserStatuses();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (username && token) {\r\n            const ws = new WebSocket(`ws://127.0.0.1:8000/ws/${username}`);\r\n            websocketRef.current = ws;\r\n\r\n            ws.onopen = () => {\r\n                console.log('WebSocket connection opened');\r\n            };\r\n\r\n            ws.onmessage = (event) => {\r\n                const message = JSON.parse(event.data);\r\n                console.log('Received message:', message);\r\n                if (message.type === 'message') {\r\n                    setMessages((prevMessages) => {\r\n                        const updatedMessages = [...prevMessages, message.data];\r\n                        localStorage.setItem(`chatMessages_${username}`, JSON.stringify(updatedMessages));\r\n                        return updatedMessages;\r\n                    });\r\n                } else if (message.type === 'status') {\r\n                    setUserStatuses(message.data);\r\n                } else if (message.type === 'error') {\r\n                    console.error(message.data);\r\n                }\r\n            };\r\n\r\n            ws.onclose = () => {\r\n                console.log('WebSocket connection closed');\r\n                setTimeout(() => {\r\n                    console.log('Reconnecting...');\r\n                    websocketRef.current = new WebSocket(`ws://127.0.0.1:8000/ws/${username}`);\r\n                }, 2000);\r\n            };\r\n\r\n            ws.onerror = (error) => {\r\n                console.error('WebSocket error:', error);\r\n            };\r\n\r\n            return () => {\r\n                ws.close();\r\n            };\r\n        }\r\n    }, [username, token]);\r\n\r\n    const sendMessage = () => {\r\n        if (input.trim() !== '') {\r\n            const message = {\r\n                type: chatType === 'one-to-one' ? 'one-to-one' : 'group',\r\n                recipient: chatType === 'one-to-one' ? selectedUser : undefined,\r\n                room: chatType === 'group' ? 'opcode convo' : undefined,\r\n                text: input.trim(),\r\n            };\r\n\r\n            if (websocketRef.current && websocketRef.current.readyState === WebSocket.OPEN) {\r\n                websocketRef.current.send(JSON.stringify(message));\r\n                console.log('Sent message:', message);\r\n                setMessages((prevMessages) => {\r\n                    const updatedMessages = [...prevMessages, { user: username, text: input.trim() }];\r\n                    localStorage.setItem(`chatMessages_${username}`, JSON.stringify(updatedMessages));\r\n                    return updatedMessages;\r\n                });\r\n                setInput(''); // Clear input after sending\r\n            } else {\r\n                console.error('WebSocket connection is not open');\r\n            }\r\n        }\r\n    };\r\n\r\n    // Ignore the handleUserSelection variable warning\r\n    // eslint-disable-next-line\r\n    const handleUserSelection = (user) => {\r\n        setSelectedUser(user);\r\n        setChatType('one-to-one');\r\n    };\r\n\r\n    const handleGroupChat = () => {\r\n        setChatType('group');\r\n        setSelectedUser('');\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"sidebar\">\r\n                <h2>Users</h2>\r\n                {Object.keys(userStatuses).map((user) => (\r\n                    <div key={user} className={`user-item ${userStatuses[user]}`}>\r\n                        <img src={userProfilePics[user]} alt={`${user}'s profile`} />\r\n                        {user}\r\n                    </div>\r\n                ))}\r\n                <button onClick={handleGroupChat}>Group Chat</button>\r\n            </div>\r\n            <div className=\"chat-box\">\r\n                <div className=\"messages\">\r\n                    {messages.map((message, index) => (\r\n                        <div key={index} className={`message ${message.user === username ? 'sent' : 'received'}`}>\r\n                            <strong>{message.user}: </strong>\r\n                            {message.text}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    onKeyDown={(e) => (e.key === 'Enter' ? sendMessage() : null)}\r\n                />\r\n                <button onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}